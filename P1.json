{
    "name": "P1",
    "description": "BooleanLogic: A language that expresses and evaluates boolean logic",
    "structure": {
        "P1": [
            "P1.ypr",
            {
                "ydl": [
                    "constants.ydl",
                    "operators.ydl",
                    "evaluator.ydl",
                    "parser.ydl",
                    "shell.ydl"
                ],
                "rust": [
                    "Cargo.toml",
                    {
                        "src": [
                            "constants.rs",
                            "operators.rs",
                            "evaluator.rs",
                            "parser.rs",
                            "shell.rs"
                        ]
                    }
                ],
                "python": [
                    "setup.py",
                    {
                        "src": null
                    },
                    "constants.py",
                    "operators.py",
                    "evaluator.py",
                    "parser.py",
                    "shell.py"
                ]
            }
        ]
    },
    "syntax": {
        "constants": [
            true,
            false
        ],
        "operators": {
            ",": {
                "description": "Logical AND operator. Returns true if both operands are true.",
                "arity": 2
            },
            ";": {
                "description": "Logical OR operator. Returns true if either operand is true.",
                "arity": 2
            },
            "\\\\+": {
                "description": "Logical NOT operator. Returns true if the operand is false, and vice versa.",
                "arity": 1
            }
        }
    },
    "modules": {
        "constants": {
            "description": "Defines the boolean constants true and false.",
            "ydl": "ydl/constants.ydl",
            "language-specific": {
                "rust": {
                    "rust/src/constants.rs": {
                        "struct": "Constants",
                        "attributes": {
                            "values": {
                                "type": "array of boolean",
                                "description": "An array storing the boolean constants."
                            }
                        }
                    }
                },
                "python": {
                    "python/src/constants.py": {
                        "class": "Constants",
                        "attributes": {
                            "values": {
                                "type": "list of boolean",
                                "description": "A list storing the boolean constants."
                            }
                        }
                    }
                }
            }
        },
        "operators": {
            "description": "Implements the boolean operators: AND, OR, and NOT.",
            "ydl": "ydl/operators.ydl",
            "functions": {
                "and_operator": {
                    "description": "Takes two boolean operands and returns their logical AND.",
                    "parameters": {
                        "operand1": "boolean",
                        "operand2": "boolean"
                    },
                    "return": "boolean"
                },
                "or_operator": {
                    "description": "Takes two boolean operands and returns their logical OR.",
                    "parameters": {
                        "operand1": "boolean",
                        "operand2": "boolean"
                    },
                    "return": "boolean"
                },
                "not_operator": {
                    "description": "Takes one boolean operand and returns its logical NOT.",
                    "parameters": {
                        "operand": "boolean"
                    },
                    "return": "boolean"
                }
            },
            "language-specific": {
                "rust": {
                    "rust/src/operators.rs": {
                        "struct": "Operators"
                    }
                },
                "python": {
                    "python/src/operators.py": {
                        "class": "Operators"
                    }
                }
            }
        },
        "evaluator": {
            "description": "Evaluates boolean expressions parsed into an internal format.",
            "ydl": "ydl/evaluator.ydl",
            "functions": {
                "evaluate": {
                    "description": "Takes an internal expression and evaluates it.",
                    "parameters": {
                        "expression": "string"
                    },
                    "return": "boolean",
                    "calls": [
                        "parser.parse",
                        "operators.and_operator",
                        "operators.or_operator",
                        "operators.not_operator"
                    ]
                }
            },
            "language-specific": {
                "rust": {
                    "rust/src/evaluator.rs": {
                        "struct": "Evaluator"
                    }
                },
                "python": {
                    "python/src/evaluator.py": {
                        "class": "Evaluator"
                    }
                }
            }
        },
        "parser": {
            "description": "Parses expressions into an internal format for evaluation. The internal format is a list of tuples, where each tuple contains an operator and its operands.",
            "ydl": "ydl/parser.ydl",
            "functions": {
                "parse": {
                    "description": "Takes an expression as a string and parses it into an internal format.",
                    "parameters": {
                        "expression": "string"
                    },
                    "return": "internal_expression"
                }
            },
            "language-specific": {
                "rust": {
                    "rust/src/parser.rs": {
                        "struct": "Parser"
                    }
                },
                "python": {
                    "python/src/parser.py": {
                        "class": "Parser"
                    }
                }
            }
        },
        "shell": {
            "description": "Interactive shell for entering boolean expressions and getting their evaluated results.",
            "ydl": "ydl/shell.ydl",
            "exports": [
                "start_shell",
                "load_file"
            ],
            "imports": [
                "parser.parse",
                "evaluator.evaluate"
            ],
            "language-specific": {
                "rust": {
                    "rust/src/shell.rs": {
                        "struct": "Interactive"
                    }
                },
                "python": {
                    "python/src/shell.py": {
                        "class": "Interactive"
                    }
                }
            }
        }
    },
    "examples": {
        "example1": {
            "description": "Evaluation of an AND operation where one operand is false.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": ",(true, false)"
            },
            "expected_result": false
        },
        "example2": {
            "description": "Evaluation of an OR operation where one operand is true.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": ";(true, false)"
            },
            "expected_result": true
        },
        "example3": {
            "description": "Evaluation of a NOT operation on a true operand.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": "\\\\+(true)"
            },
            "expected_result": false
        }
    },
    "tests": {
        "test1": {
            "description": "Test of an AND operation where one operand is false.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": ",(true, false)"
            },
            "expected_result": false
        },
        "test2": {
            "description": "Test of an OR operation where one operand is true.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": ";(true, false)"
            },
            "expected_result": true
        },
        "test3": {
            "description": "Test of a NOT operation on a true operand.",
            "function_call": "evaluator.evaluate",
            "parameters": {
                "expression": "\\\\+(true)"
            },
            "expected_result": false
        }
    },
    "interactive_examples": {
        "Basic Operations": {
            "module": "shell",
            "content": "Prolog Lite - P1 Shell Enter your Prolog queries or use built-in commands: - Type"
        }
    }
}