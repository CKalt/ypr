%YPR 1.0
name: P1
description: "BooleanLogic: A language that expresses and evaluates boolean logic"

syntax:
  constants: [true, false]
  operators:
    - name: ','
      arity: 2
      description: "Logical AND operator. It takes two operands and returns true if both operands are true."
    - name: ';'
      arity: 2
      description: "Logical OR operator. It takes two operands and returns true if at least one operand is true."
    - name: '\\+'
      arity: 1
      description: "Logical NOT operator. It takes one operand and returns true if the operand is false."

modules:
  - name: constants
    description: "Defines the boolean constants true and false."
    language-specific:
      - rust: 
          - filename: src/constants/constants.rs
          - struct: Constants
            - attribute: values
              - type: array of boolean
      - python: 
          - filename: constants/constants.py
          - class: Constants
            - attribute: values
              - type: list of boolean

  - name: operators
    description: "Implements the boolean operators AND, OR, and NOT."
    functions:
      - name: and_operator
        description: "Implements the logical AND operation."
        parameters: [operand1: boolean, operand2: boolean]
        return: boolean
      - name: or_operator
        description: "Implements the logical OR operation."
        parameters: [operand1: boolean, operand2: boolean]
        return: boolean
      - name: not_operator
        description: "Implements the logical NOT operation."
        parameters: [operand: boolean]
        return: boolean
    language-specific:
      - rust: 
          - filename: src/operators/operators.rs
          - struct: Operators
      - python: 
          - filename: operators/operators.py
          - class: Operators

  - name: evaluator
    description: "Evaluates boolean expressions using the defined operators and constants."
    functions:
      - name: evaluate
        description: "Parses and evaluates a given boolean expression."
        parameters: [expression: string]
        return: boolean
        calls: [parser.parse, operators.and_operator, operators.or_operator, operators.not_operator]
    language-specific:
      - rust: 
          - filename: src/evaluator/evaluator.rs
          - struct: Evaluator
      - python: 
          - filename: evaluator/evaluator.py
          - class: Evaluator

  - name: parser
    description: "Parses expressions into an internal format for evaluation."
    functions:
      - name: parse
        description: "Converts a given boolean expression into an internal format for evaluation."
        parameters: [expression: string]
        return: internal_expression
    language-specific:
      - rust: 
          - filename: src/parser/parser.rs
          - struct: Parser
      - python: 
          - filename: parser/parser.py
          - class: Parser

  - name: shell
    description: "Interactive shell for entering and evaluating boolean expressions."
    functions:
      - name: start_shell
        description: "Starts the interactive shell for the P1 language."
        parameters: []
        return: None
        calls: [evaluator.evaluate]
    language-specific:
      - rust: 
          - filename: src/shell/shell.rs
          - struct: Shell
      - python: 
          - filename: shell/shell.py
          - class: Shell

examples:
  - description: "Example of logical AND operation where both operands are true."
    expression: ',(true, true)'
    result: true
  - description: "Example of logical OR operation where one operand is true."
    expression: ';(true, false)'
    result: true
  - description: "Example of logical NOT operation on a true operand."
    expression: '\\+(true)'
    result: false

tests:
  - description: "Test for logical AND operation where both operands are true."
    query: ',(true, true).'
    expected: true
  - description: "Test for logical OR operation where one operand is true."
    query: ';(true, false).'
    expected: true
  - description: "Test for logical NOT operation on a true operand."
    query: '\\+(true).'
    expected: false

shell: |
  Prolog Lite - P1 Shell
  Enter your Prolog queries or use built-in commands:
  - Type 'exit.' to quit the shell.
  - Type 'consult("<filename>").' to load a file with P1 facts.
 
  ?- ';(true, false).'
  Result: true

  ?- '\\+(true).'
  Result: false

  ?- exit.
  Exiting Prolog Lite - P1 Shell
