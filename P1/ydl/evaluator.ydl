name: evaluator
description: "Evaluates boolean expressions parsed into an internal format by the parser module."

imports: 
  - prolog_parser
  - operators

attributes: 
  parser:
    description: "Instance of the parser module for parsing expressions."
    type: prolog_parser
  operators:
    description: "Instance of the operators module for performing operations."
    type: operators

functions:
  evaluate:
    description: "Takes an internal expression and evaluates it to return a boolean value."
    parameters: 
      expression: 
        type: string
        description: "A string representation of a boolean expression."
    return: 
      type: boolean
      description: "The result of the evaluated boolean expression."
    calls:
      - prolog_parser.parse
      - operators.and_operator
      - operators.or_operator
      - operators.not_operator
    body: |
      parsedExpression = prolog_parser.parse(expression)
      For each tuple in the parsedExpression:
          operator = tuple.operator
          operands = tuple.operands
          If operator is AND:
              result = operators.and_operator(operands)
          Else if operator is OR:
              result = operators.or_operator(operands)
          Else if operator is NOT:
              result = operators.not_operator(operands)
          Replace the tuple in parsedExpression with the result.
      Return the final evaluated result (result of last operation).
  initialize:
    description: "Initializes the evaluator module by creating instances of the parser and operators modules."
    parameters: []
    return: None
    calls: []
    body: |
      parser = prolog_parser.Parser()
      operators = operators.Operators()
